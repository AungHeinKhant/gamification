// Vocabulary Data
const vocabularyData = [
    { word: 'Table(·ÄÖ·Ä¨·Ä∏·Äï·ÄΩ·Ä≤)', translation: '–°—Ç–æ–ª' },
    { word: 'Chair(·ÄÄ·ÄØ·Äú·Ä¨·Ä∏·Äë·Ä≠·ÄØ·ÄÑ·Ä∫)', translation: '–°—Ç—É–ª' },
    { word: 'Dog(·ÄÅ·ÄΩ·Ä±·Ä∏)', translation: '–°–æ–±–∞–∫–∞' },
    { word: 'Cat(·ÄÄ·Äº·Ä±·Ä¨·ÄÑ·Ä∫)', translation: '–ö–æ—Ç' },
    { word: 'Book(·ÄÖ·Ä¨·Ä°·ÄØ·Äï·Ä∫)', translation: '–ö–Ω–∏–≥–∞' },
    { word: 'Pen(·Äï·Ä≤·Äë·Ä≠·ÄØ·Ä∏)', translation: '–†—É—á–∫–∞' },
    { word: 'Notebook(·Äí·Ä≠·ÄØ·ÄÑ·Ä∫·ÄÖ·Ä¨·Ä°·ÄØ·Äï·Ä∫)', translation: '–ë–ª–æ–∫–Ω–æ—Ç' },
    { word: 'Window(·Äë·ÄΩ·ÄÄ·Ä∫·Äï·Ä±·Ä´·ÄÄ·Ä∫)', translation: '–û–∫–Ω–æ' },
    { word: 'Door(·Äê·Ä∂·ÄÅ·Ä´·Ä∏)', translation: '–î–≤–µ—Ä—å' },
    { word: 'Cup(·ÄÅ·ÄΩ·ÄÄ·Ä∫)', translation: '–ß–∞—à–∫–∞' },
    { word: 'Glass(·Äû·ÄΩ·Ä¨·Ä∏·Äû·ÄΩ·Ä¨·Ä∏)', translation: '–°—Ç–∞–∫–∞–Ω' },
    { word: 'Bed(·Ä°·Ä≠·Äï·Ä∫·Äõ·Ä¨)', translation: '–ö—Ä–æ–≤–∞—Ç—å' },
    { word: 'Kitchen(·Äô·ÄÆ·Ä∏·Äñ·Ä≠·ÄØ·ÄÅ·Äª·Ä±·Ä¨·ÄÑ·Ä∫)', translation: '–ö—É—Ö–Ω—è' },
    { word: 'Bathroom(·Äõ·Ä±·ÄÅ·Äª·Ä≠·ÄØ·Ä∏·ÄÅ·Äî·Ä∫·Ä∏)', translation: '–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞' },
    { word: 'Car(·ÄÄ·Ä¨·Ä∏)', translation: '–ú–∞—à–∏–Ω–∞' },
    { word: 'Bicycle(·ÄÖ·ÄÄ·Ä∫·Äò·ÄÆ·Ä∏)', translation: '–í–µ–ª–æ—Å–∏–ø–µ–¥' },
    { word: 'Shoe(·ÄÖ·ÄΩ·Äï·Ä∫·ÄÖ·ÄÆ·Ä∏·Ä°·Äï·Ä∫)', translation: '–û–±—É–≤—å' },
    { word: 'T-shirt(·Ä°·ÄÑ·Ä∫·Äπ·ÄÄ·Äª·ÄÆ)', translation: '–§—É—Ç–±–æ–ª–∫–∞' },
    { word: 'Hat(·Äë·ÄØ·Äê·ÄØ·Äï·Ä∫)', translation: '–®–ª—è–ø–∞' },
    { word: 'Rain(·Äô·Ä≠·ÄØ·Ä∏·Äõ·Ä±)', translation: '–î–æ–∂–¥—å' },
    { word: 'Snow(·Äô·Äº·Ä±·ÄÅ·ÄÑ·Ä∫·Ä∏)', translation: '–°–Ω–µ–≥' },
    { word: 'Sun(·Äî·Ä±)', translation: '–°–æ–ª–Ω—Ü–µ' },
    { word: 'Cloud(·Äô·Ä≠·ÄØ·Ä∏·ÄÄ·ÄΩ·ÄÑ·Ä∫·Ä∏)', translation: '–û–±–ª–∞–∫–æ' },
    { word: 'Star(·Äê·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Äû·Ä±·Ä¨·Äî·ÄÄ·Äπ·ÄÅ·Äê·Ä∫)', translation: '–ó–≤–µ–∑–¥–∞' },
    { word: 'Mountain(·Äê·Ä±·Ä¨·ÄÑ·Ä∫·Äê·Äî·Ä∫·Ä∏)', translation: '–ì–æ—Ä–∞' },
    { word: 'River(·Äô·Äº·ÄÖ·Ä∫)', translation: '–†–µ–∫–∞' },
    { word: 'Ocean(‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£)', translation: '–û–∫–µ–∞–Ω' },
    { word: 'Island(·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Ä∏)', translation: '–û—Å—Ç—Ä–æ–≤' },
    { word: 'Tree(·Äû·ÄÖ·Ä∫·Äï·ÄÑ·Ä∫)', translation: '–î–µ—Ä–µ–≤–æ' },
    { word: 'Flower(·Äï·Äî·Ä∫·Ä∏)', translation: '–¶–≤–µ—Ç–æ–∫' },
    { word: 'Bird(·Äï·Äª·Ä±·Ä¨·ÄÄ·ÄΩ·ÄÄ·Ä∫)', translation: '–ü—Ç–∏—Ü–∞' },
];


// Gamification Variables
let points = 0;
const badges = [];

// Function to Update Points
function updatePoints(amount) {
    points += amount;
    document.getElementById('points').textContent = points;
    checkBadges(); // Check if badges are earned
}

// Function to Award Badges
function awardBadge(badgeName) {
    if (!badges.includes(badgeName)) {
        badges.push(badgeName);

        // Create and Display Badge
        const badgeElement = document.createElement('div');
        badgeElement.className = 'badge';
        badgeElement.textContent = badgeName;
        document.getElementById('badges').appendChild(badgeElement);

        alert(`üéâ You've earned a badge: ${badgeName}`);
    }
}

// Check if Badges are Earned
function checkBadges() {
    if (points >= 50 && !badges.includes('50 Points Achiever')) {
        awardBadge('50-–æ—á–∫–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫');
    }

    if (points >= 100 && !badges.includes('100 Points Master')) {
        awardBadge('100 –æ—á–∫–æ–≤ –ú–∞—Å—Ç–µ—Ä');
    }
}

// Load Multiple Choice Lesson
function loadMultipleChoiceLesson() {
    const gameArea = document.getElementById('game-area');
    gameArea.innerHTML = ''; // Clear previous content

    const questionData = vocabularyData[Math.floor(Math.random() * vocabularyData.length)];
    const correctAnswer = questionData.translation;

    // Display Question
    const question = document.createElement('p');
    question.textContent = `–ö–∞–∫ –ø–æ-—Ä—É—Å—Å–∫–∏ –±—É–¥–µ—Ç "${questionData.word}"?`;
    gameArea.appendChild(question);

    // Shuffle and Display Options
    const options = [...vocabularyData.map(item => item.translation)].sort(() => Math.random() - 0.5);
    options.forEach(option => {
        const button = document.createElement('button');
        button.textContent = option;
        button.className = 'option-btn';
        button.addEventListener('click', () => {
            if (option === correctAnswer) {
                alert('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
                updatePoints(10); // Award Points
                loadMultipleChoiceLesson(); // Load next question
            } else {
                alert('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
            }
        });
        gameArea.appendChild(button);
    });
}

// Load Flashcard Lesson
function loadFlashcardLesson() {
    const gameArea = document.getElementById('game-area');
    gameArea.innerHTML = ''; // Clear previous content

    const flashcardData = vocabularyData[Math.floor(Math.random() * vocabularyData.length)];

    // Create Flashcard Container
    const flashcardContainer = document.createElement('div');
    flashcardContainer.className = 'flashcard-container'; // Container for 3D effect

    // Create Flashcard
    const flashcard = document.createElement('div');
    flashcard.className = 'flashcard';  // Add class for 3D flip
    flashcard.innerHTML = `<div class="front">${flashcardData.word}</div><div class="back">${flashcardData.translation}</div>`;
    flashcardContainer.appendChild(flashcard);

    gameArea.appendChild(flashcardContainer);

    // Create Flip Button
    const flipButton = document.createElement('button');
    flipButton.textContent = '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—É';
    flipButton.addEventListener('click', () => {
        flashcard.classList.toggle('flip'); // Toggle flip effect on click
    });
    gameArea.appendChild(flipButton);

    // Create "Next" Button
    const nextButton = document.createElement('button');
    nextButton.textContent = '–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞';
    nextButton.addEventListener('click', () => {
        updatePoints(5); // Award Points
        loadFlashcardLesson(); // Load next card
    });
    gameArea.appendChild(nextButton);
}


// Toggle Between Games
document.getElementById('multiple-choice-btn').addEventListener('click', loadMultipleChoiceLesson);
document.getElementById('flashcard-btn').addEventListener('click', loadFlashcardLesson);

// Initialize with Multiple Choice
loadMultipleChoiceLesson();
